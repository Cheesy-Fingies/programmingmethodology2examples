#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

int arraySize = 7;     //Array size : change integer to have more values sorted


int partition(int *quickPointer, int p, int r)      //PARTIION FUNCTION
{
    int i = p - 1;      //line 2 of psuedocode in slides
    
    for(int j = p; j < r; j++)      //line 3 of psuedocode in slides
    {
        if(*(quickPointer + j) <= *(quickPointer + r))
        {
            i = i + 1;
            
            //Swapping : line 6
            int tempLoop = *(quickPointer + i);
            *(quickPointer + i) = *(quickPointer + j);
            *(quickPointer + j) = tempLoop; 
        }
    }
    
    //swapping : line 7
    int tempPar = *(quickPointer + r); 
    *(quickPointer + r) = *(quickPointer + (i + 1));
    *(quickPointer + (i + 1)) = tempPar;
    
    return (i + 1); 
}

int randomPartition(int *randomPointer, int p, int r)       //RANDOM PARTITION FUNCTION
{
    int i = (rand() % r + p);    //Generate i
    
    int temp = *(randomPointer + r);                //swapping A(i) and A(r))
    *(randomPointer + r) = *(randomPointer + i);
    *(randomPointer + i) = temp;
    
    return partition(randomPointer, p, r);
}

int randomSelect(int *randomPointer, int p, int r, int i)       //RANDOM SELECT FUNCTION
{
    if(p == r)          // line 1 psuedocode
    {
        return *(randomPointer + p);        //line 2 psuedocode
    }
    
    int q = randomPartition(randomPointer, p, r);   //line 3 psuedocode
    
    int k = q - p + 1;
    
    if(i == k)
    {
        return *(randomPointer + q);
    }
    else if(i < k)
    {
        return randomSelect(randomPointer, p, q - 1, i);
    }
    else
    {
        return randomSelect(randomPointer, q + 1, r, i - k);
    }
}

int main()
{
    srand(time(NULL));      //Random function seed
    
    int ithElement = 0;
    
    int randomArray[arraySize];      //Generates array of equal to arraySize
    
    int *randomPointer = &randomArray[0];    //Setting pointer for passing array into function 
    
    for(int i = 0; i < arraySize; i++)
    {
        randomArray[i] = ((rand() % 30) + 1);     //Generates random values for Array
    }
    
    cout << "The array: ";
    
     for(int i = 0; i < arraySize; i++)     //Prints array
    {
        cout << randomArray[i] << " ";
    }
   
    while(ithElement < 1 || ithElement > arraySize)
    {
        cout << "\n\nWhat is the largest value you would like to see?\n\n(1 = smallest, " << arraySize << " = largest number)\n\n";
        cin >> ithElement;
        
        if(ithElement < 1 || ithElement > arraySize)
        {
            cout << "\n\nPlease enter a valid selection";
            continue;
        }
        else
        {
            break;
        }
    }
    
    int resultFromSelect = randomSelect(randomPointer, 0, (arraySize - 1), ithElement);  //Finds value
    
    cout << "\n\nThe i'th largest value of the array, where i is " << arraySize - ithElement + 1 << ", was found to be ..." << resultFromSelect;
    
    return 0;
}

